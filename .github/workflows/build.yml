name: Build FlightGear
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: windows-latest
    env:
      CMAKE_TOOLCHAIN: Visual Studio 17 2022
      ROOT_DIR: ${{ github.workspace }}
      QT_VERSION: 5.15.2
      QT_DIR: C:\\Qt  # We'll install Qt here

    steps:
      - name: Checkout code (with shallow submodules)
        uses: actions/checkout@v3
        with:
          submodules: true
          # fetch-depth: 1
          # submodules-depth: 1

      - name: Patch CMakeLists for SimGear and FlightGear
        shell: powershell
        run: |
          (Get-Content $Env:ROOT_DIR\simgear\CMakeLists.txt) `
            -replace 'cmake_policy\(SET CMP0167 NEW\)', 'cmake_policy(SET CMP0167 OLD)' `
            | Set-Content $Env:ROOT_DIR\simgear\CMakeLists.txt
          (Get-Content $Env:ROOT_DIR\flightgear\CMakeLists.txt) `
            -replace 'cmake_policy\(SET CMP0167 NEW\)', 'cmake_policy(SET CMP0167 OLD)' `
            | Set-Content $Env:ROOT_DIR\flightgear\CMakeLists.txt

      - name: Install aqtinstall
        run: pip install aqtinstall

      # Install Qt 5.15.2 MSVC2019_64 using aqtinstall
      # This will place Qt into C:\Qt\5.15.2\msvc2019_64
      - name: Install Qt via aqtinstall
        shell: cmd
        run: |
          aqt install-qt windows desktop %QT_VERSION% win64_msvc2019_64 --outputdir %QT_DIR%
          echo "QT5SDK64=%QT_DIR%\\%QT_VERSION%\\msvc2019_64" >> %GITHUB_ENV%

      - name: Install Inno Setup
        run: choco install innosetup -y

      - name: Create build directories
        run: |
          mkdir osg-build
          mkdir simgear-build
          mkdir flightgear-build

      - name: Add compiler definitions for HTS_engine
        shell: cmd
        run: |
          echo "CMAKE_C_FLAGS_RELEASE=/DWIN32_LEAN_AND_MEAN /D_WIN32_WINNT=0x0A00" >> %GITHUB_ENV%
          echo "CMAKE_CXX_FLAGS_RELEASE=/DWIN32_LEAN_AND_MEAN /D_WIN32_WINNT=0x0A00" >> %GITHUB_ENV%

      # Build OSG
      - name: Configure OSG
        shell: cmd
        run: |
          cd %ROOT_DIR%\osg-build
          cmake %ROOT_DIR%\openscenegraph -G "%CMAKE_TOOLCHAIN%" -A x64 ^
            -DACTUAL_3RDPARTY_DIR=%ROOT_DIR%\windows-3rd-party\msvc140\3rdParty.x64 ^
            -DCMAKE_Release_POSTFIX:STRING= ^
            -DOSG_USE_UTF8_FILENAME:BOOL=ON ^
            -DWIN32_USE_MP:BOOL=ON ^
            -DCMAKE_INSTALL_PREFIX:PATH=%ROOT_DIR%\install

      - name: Build & Install OSG
        shell: cmd
        run: |
          cd %ROOT_DIR%\osg-build
          cmake --build . --config Release --target INSTALL

      # Build SimGear
      - name: Configure SimGear
        shell: cmd
        run: |
          cd %ROOT_DIR%\simgear-build
          cmake %ROOT_DIR%\simgear -G "%CMAKE_TOOLCHAIN%" -A x64 ^
            -DOSG_FSTREAM_EXPORT_FIXED:BOOL=ON ^
            -DCMAKE_INSTALL_PREFIX:PATH=%ROOT_DIR%\install

      - name: Build & Install SimGear
        shell: cmd
        run: |
          cd %ROOT_DIR%\simgear-build
          cmake --build . --config Release --target INSTALL

      # Build FlightGear
      - name: Configure FlightGear
        shell: cmd
        run: |
          cd %ROOT_DIR%\flightgear-build
          cmake %ROOT_DIR%\flightgear -G "%CMAKE_TOOLCHAIN%" -A x64 ^
            -DCMAKE_INSTALL_PREFIX:PATH=%ROOT_DIR%\install ^
            -DCMAKE_PREFIX_PATH=%QT5SDK64% ^
            -DOSG_FSTREAM_EXPORT_FIXED:BOOL=ON ^
            -DCMAKE_C_FLAGS_RELEASE="%CMAKE_C_FLAGS_RELEASE%" ^
            -DCMAKE_CXX_FLAGS_RELEASE="%CMAKE_CXX_FLAGS_RELEASE%"

      - name: Build & Install FlightGear
        shell: cmd
        run: |
          cd %ROOT_DIR%\flightgear-build
          cmake --build . --config Release --target INSTALL -- /v:diag

      # Prepare Installer Dependencies
      - name: Prepare Installer Dependencies
        shell: cmd
        run: |
          copy "%ROOT_DIR%\windows-3rd-party\msvc140\3rdParty.x64\bin\*.dll" "%ROOT_DIR%\install\bin"
          "%QT5SDK64%\bin\windeployqt.exe" "%ROOT_DIR%\install\bin\fgfs.exe"

      # Run Inno Setup to create the installer
      - name: Create Installer
        shell: cmd
        run: |
          "C:\Program Files (x86)\Inno Setup 6\ISCC.exe" "%ROOT_DIR%\inno_setup.iss"

      - name: Upload Installer Artifact
        uses: actions/upload-artifact@v3
        with:
          name: FlightGearInstaller
          path: ${{ env.ROOT_DIR }}\FlightGearInstaller.exe
